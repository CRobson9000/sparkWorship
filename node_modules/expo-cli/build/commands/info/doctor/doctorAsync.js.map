{"version":3,"sources":["../../../../src/commands/info/doctor/doctorAsync.ts"],"names":["validateSupportPackagesAsync","sdkVersion","versionsForSdk","supportPackagesToValidate","allPackagesValid","pkg","version","isVersionValid","name","validateIllegalPackagesAsync","illegalPackages","allPackagesLegal","isPackageAbsent","actionAsync","projectRoot","options","exp","getConfig","foundSomeIssues","Versions","gteSdkVersion","validateDependenciesVersionsAsync","fixDependencies","Doctor","validateExpoServersAsync","validateWithNetworkAsync","NO_ISSUES","process","exitCode","Log","log","chalk","green"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport { Doctor, Versions } from 'xdl';\n\nimport Log from '../../../log';\nimport { getRemoteVersionsForSdk } from '../../../utils/getRemoteVersionsForSdk';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { validateDependenciesVersionsAsync } from '../../utils/validateDependenciesVersions';\nimport { warnAboutDeepDependenciesAsync } from './depedencies/explain';\nimport { warnUponCmdExe } from './windows';\n\ntype Options = {\n  fixDependencies?: boolean;\n};\n\nasync function validateSupportPackagesAsync(sdkVersion: string): Promise<boolean> {\n  const versionsForSdk = await getRemoteVersionsForSdk(sdkVersion);\n\n  const supportPackagesToValidate = [\n    'expo-modules-autolinking',\n    '@expo/config-plugins',\n    '@expo/prebuild-config',\n  ];\n\n  let allPackagesValid = true;\n  for (const pkg of supportPackagesToValidate) {\n    const version = versionsForSdk[pkg];\n    if (version) {\n      const isVersionValid = await warnAboutDeepDependenciesAsync({ name: pkg, version });\n      if (!isVersionValid) {\n        allPackagesValid = false;\n      }\n    }\n  }\n  return allPackagesValid;\n}\n\n// Ensures that a set of packages\nasync function validateIllegalPackagesAsync(): Promise<boolean> {\n  const illegalPackages = [\n    '@unimodules/core',\n    '@unimodules/react-native-adapter',\n    'react-native-unimodules',\n  ];\n\n  let allPackagesLegal = true;\n\n  for (const pkg of illegalPackages) {\n    const isPackageAbsent = await warnAboutDeepDependenciesAsync({ name: pkg });\n    if (!isPackageAbsent) {\n      allPackagesLegal = false;\n    }\n  }\n\n  return allPackagesLegal;\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  await warnUponCmdExe();\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot);\n  let foundSomeIssues = false;\n\n  // Only use the new validation on SDK +45.\n  if (Versions.gteSdkVersion(exp, '45.0.0')) {\n    if (!(await validateSupportPackagesAsync(exp.sdkVersion!))) {\n      foundSomeIssues = true;\n    }\n  }\n\n  if (Versions.gteSdkVersion(exp, '44.0.0')) {\n    if (!(await validateIllegalPackagesAsync())) {\n      foundSomeIssues = true;\n    }\n  }\n\n  if (\n    !(await profileMethod(validateDependenciesVersionsAsync)(\n      projectRoot,\n      exp,\n      pkg,\n      options.fixDependencies\n    ))\n  ) {\n    foundSomeIssues = true;\n  }\n\n  // note: this currently only warns when something isn't right, it doesn't fail\n  await Doctor.validateExpoServersAsync(projectRoot);\n\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) !== Doctor.NO_ISSUES) {\n    foundSomeIssues = true;\n  }\n\n  if (foundSomeIssues) {\n    process.exitCode = 1;\n  } else {\n    Log.log(chalk.green(`ðŸŽ‰ Didn't find any issues with the project!`));\n  }\n}\n"],"file":"doctorAsync.js"}